{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nimport VueMultiselect from 'vue-multiselect';\nimport { toRaw } from \"vue\";\nexport default {\n  name: \"AgendaPage\",\n  components: {\n    VueMultiselect\n  },\n  data() {\n    return {\n      email_professore: \"pippo@gmail.com\",\n      titolo_corso: 'Matematica',\n      mydata: null,\n      selectedProfessor: null,\n      selectedCourse: null,\n      listOfCourses: null,\n      cities: ['Asti', 'Torino', 'Milano']\n    };\n  },\n  async created() {\n    this.Foo();\n  },\n  methods: {\n    async Foo() {\n      try {\n        const response = await axios.get('ServletGetTeachings', {\n          params: {\n            action: 'web'\n          }\n        });\n        let x = toRaw(response.data);\n        let map = new Map();\n        for (let i = 0; i < x.length; i++) {\n          let key = x[i].professor.name + \" \" + x[i].professor.surname + \" \" + \"(\" + x[i].professor.email + \")\";\n          if (!map.has(key)) {\n            let listOfCourses = [x[i].course.course_titol];\n            let professorInfo = x[i].professor;\n            map.set(key, {\n              professorInfo: professorInfo,\n              listOfCourses: listOfCourses\n            });\n          } else {\n            let info = map.get(key);\n            let listOfCourse = info.listOfCourses;\n            listOfCourse.push(x[i].course.course_titol);\n          }\n        }\n        let list = [];\n        map.forEach((value, key) => {\n          list.push({\n            email: key,\n            info: value\n          });\n        });\n        this.mydata = list;\n        this.selectedProfessor = list[0];\n        this.listOfCourses = list[0].info.listOfCourses;\n        this.selectedCourse = list[0].info.listOfCourses[0];\n      } catch (e) {\n        console.error(e);\n      }\n    }\n  },\n  watch: {\n    selectedProfessor(newProfessor, oldProfessor) {\n      this.listOfCourses = newProfessor.info.listOfCourses;\n      this.selectedCourse = newProfessor.info.listOfCourses[0];\n      console.log(toRaw(this.listOfCourses));\n    }\n  }\n};","map":{"version":3,"names":["axios","VueMultiselect","toRaw","name","components","data","email_professore","titolo_corso","mydata","selectedProfessor","selectedCourse","listOfCourses","cities","created","Foo","methods","response","get","params","action","x","map","Map","i","length","key","professor","surname","email","has","course","course_titol","professorInfo","set","info","listOfCourse","push","list","forEach","value","e","console","error","watch","newProfessor","oldProfessor","log"],"sources":["C:\\Users\\giaco\\Desktop\\folderperview\\src\\pages\\AgendaPage.vue"],"sourcesContent":["<template>\r\n  <div class=\"d-flex flex-row\">\r\n    <div class=\"spacer\"></div>\r\n    <div v-if=\"mydata\">\r\n      <VueMultiselect class=\"dropdown-style\" label=\"email\" :hideSelected=\"true\" :allowEmpty=\"false\" :options=\"this.mydata\" v-model=\"selectedProfessor\"></VueMultiselect>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <VueMultiselect class=\"dropdown-style\" :options=\"mydata\" v-model=\"selected\"></VueMultiselect>\r\n<!--    <div class=\"spacer\"></div>-->\r\n  </div>\r\n<!--  <VueMultiselect :options=\"cities\" v-model=\"selected\"></VueMultiselect>-->\r\n</template>\r\n<script>\r\n\r\nimport axios from \"axios\";\r\nimport VueMultiselect from 'vue-multiselect'\r\nimport {toRaw} from \"vue\";\r\nexport default {\r\n  name: \"AgendaPage\",\r\n  components : {\r\n    VueMultiselect\r\n  },\r\n  data(){\r\n    return{\r\n      email_professore : \"pippo@gmail.com\",\r\n      titolo_corso : 'Matematica',\r\n      mydata : null,\r\n      selectedProfessor : null,\r\n      selectedCourse : null,\r\n      listOfCourses : null,\r\n      cities : ['Asti','Torino','Milano']\r\n    }\r\n  },\r\n\r\n  async created() {\r\n    this.Foo();\r\n  },\r\n\r\n  methods : {\r\n    async Foo(){\r\n      try {\r\n        const response = await axios.get('ServletGetTeachings',{params : {action : 'web'}});\r\n        let x = toRaw(response.data);\r\n        let map = new Map();\r\n        for(let i = 0; i < x.length ; i++){\r\n          let key = x[i].professor.name+\" \"+x[i].professor.surname+\" \"+\"(\"+x[i].professor.email+\")\";\r\n          if(!map.has(key)){\r\n            let listOfCourses = [x[i].course.course_titol];\r\n            let professorInfo = x[i].professor;\r\n            map.set(key,{\r\n              professorInfo : professorInfo,\r\n              listOfCourses : listOfCourses\r\n            });\r\n          }else{\r\n            let info = map.get(key);\r\n            let listOfCourse = info.listOfCourses;\r\n            listOfCourse.push(x[i].course.course_titol);\r\n          }\r\n        }\r\n        let list = [];\r\n        map.forEach((value,key) => {\r\n          list.push({email : key,info : value});\r\n        })\r\n        this.mydata = list;\r\n        this.selectedProfessor = list[0];\r\n        this.listOfCourses = list[0].info.listOfCourses;\r\n        this.selectedCourse = list[0].info.listOfCourses[0];\r\n      }catch (e){\r\n        console.error(e)\r\n      }\r\n    },\r\n  },\r\n  watch : {\r\n    selectedProfessor(newProfessor,oldProfessor){\r\n      this.listOfCourses = newProfessor.info.listOfCourses;\r\n      this.selectedCourse = newProfessor.info.listOfCourses[0];\r\n      console.log(toRaw(this.listOfCourses));\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n\r\n\r\n<style>\r\n\r\n  .dropdown-style{\r\n    width: 400px;\r\n    margin-top: 75px;\r\n  }\r\n\r\n  .my-container-1{\r\n    height: 100%;\r\n    width: 100%;\r\n  }\r\n\r\n  .spacer{\r\n    flex-grow: 1;\r\n  }\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}